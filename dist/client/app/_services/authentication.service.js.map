{"version":3,"sources":["app/_services/authentication.service.ts"],"names":[],"mappings":"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","file":"authentication.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Headers, Response } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport \"rxjs/add/operator/map\";\nimport { Subject } from \"rxjs/Subject\";\n\n@Injectable()\nexport class AuthenticationService{\n\n    private isLoggedIn = new Subject<boolean>();\n    isLoggedIn$ = this.isLoggedIn.asObservable();\n\n    constructor(private http: Http) { }\n\n    createHeaders(headers: Headers){\n        headers.append('Content-Type', 'application/json');\n    }\n\n    login(username: string, password: string){\n        console.log(username, password);\n        let headers = new Headers();\n        this.createHeaders(headers);\n        return this.http.post('/auth/login', JSON.stringify({\n            username:username,\n            password:password\n        }), {headers: headers}).map((response: Response) => {\n            console.log(response.json());\n            let token = response.json().token;\n            let id = response.json().id;\n            let firstname = response.json().firstname;\n            let lastname = response.json().lastname;\n\n            if(id){\n                localStorage.setItem('user', JSON.stringify(id));\n                console.log(JSON.parse(localStorage.getItem('user')));\n            }\n            if(token){\n                localStorage.setItem('token', JSON.stringify(token));\n                console.log(JSON.parse(localStorage.getItem('token')));\n\n            }\n            if(firstname){\n                localStorage.setItem('firstname', JSON.stringify(firstname));\n            }\n            if(lastname){\n                localStorage.setItem('lastname', JSON.stringify(lastname));\n            }\n            return response.json();\n        })\n    }\n    logout(){\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n    }\n\n    isAuthenticated(){\n        const token = localStorage.getItem('token');\n        //console.log(\"This is the token -> \", JSON.parse(token));\n        if(token){\n            this.isLoggedIn.next(true)\n            return true;\n        }else{\n            this.isLoggedIn.next(false)\n            return false;\n        }\n    }\n    destroySession(){\n        this.isLoggedIn.next(false);\n    }\n\n}\n"]}