{"version":3,"sources":["app/_services/sentence.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA2C;AAC3C,wCAAuC;AAGvC;IADA;QAEI,mBAAc,GAAW,EAAE,CAAC;QACpB,aAAQ,GAAG,IAAI,iBAAO,EAAU,CAAC;QACzC,cAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;QAEjC,gBAAW,GAAG,IAAI,iBAAO,EAAU,CAAC;QACpC,YAAO,GAAY,CAAC,CAAC;QAC7B,iBAAY,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;QAEvC,mBAAc,GAAG,IAAI,iBAAO,EAAW,CAAC;QAChD,oBAAe,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;QAE7C,iBAAY,GAAG,IAAI,iBAAO,EAAW,CAAC;QAC9C,kBAAa,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IAiCrD,CAAC;IA/BG,qCAAW,GAAX,UAAY,IAAY;QACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IACD,0CAAgB,GAAhB;QACI,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IACD,qCAAW,GAAX,UAAY,QAAgB;QAExB,IAAI,CAAC,cAAc,IAAI,QAAQ,CAAC;QAChC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACrC,CAAC;IACD,iDAAuB,GAAvB;QACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;IACtC,CAAC;IACD,6CAAmB,GAAnB;QACI,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC7B,CAAC;IACD,2CAAiB,GAAjB;QACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IACD,sCAAY,GAAZ;QACI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IA5CQ,eAAe;QAD3B,iBAAU,EAAE;OACA,eAAe,CA8C3B;IAAD,sBAAC;CA9CD,AA8CC,IAAA;AA9CY,0CAAe","file":"sentence.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs/Subject\";\n\n@Injectable()\nexport class SentenceService{\n    sentenceString: string = \"\";\n    private sentence = new Subject<string>();\n    sentence$ = this.sentence.asObservable();\n\n    private sentenceNum = new Subject<number>();\n    private counter : number = 0;\n    sentenceNum$ = this.sentenceNum.asObservable();\n\n    private isNewSenActive = new Subject<boolean>();\n    isNewSenActive$ = this.isNewSenActive.asObservable();\n\n    private emptyArchive = new Subject<boolean>();\n    emptyArchive$ = this.emptyArchive.asObservable();\n\n    publishData(data: string){\n        this.addSentence(data);\n        this.sentence.next(data);\n        this.counter++;\n        this.sentenceNum.next(this.counter);\n        this.isNewSenActive.next(true);\n    }\n    deActivateNewSen(){\n        console.log(\"deactivate new sentence!\");\n        this.counter = 0;\n        this.isNewSenActive.next(false);\n        this.sentenceNum.next(0);\n    }\n    addSentence(sentence: string){\n\n        this.sentenceString += sentence;\n        console.log(this.sentenceString);\n    }\n    getSentenceStringLength(){\n        return this.sentenceString.length;\n    }\n    clearSentenceString(){\n        this.sentenceString = \"\";\n    }\n    getSentenceString(){\n        return this.sentenceString;\n    }\n    clearArchive(){\n        this.emptyArchive.next(true);\n    }\n\n}\n"]}