{"version":3,"sources":["app/_services/alert.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAC3C,0CAA0D;AAE1D,wCAAuC;AAGvC;IAII,sBAAoB,MAAc;QAAlC,iBAUC;QAVmB,WAAM,GAAN,MAAM,CAAQ;QAH1B,YAAO,GAAG,IAAI,iBAAO,EAAO,CAAC;QAC7B,8BAAyB,GAAG,KAAK,CAAC;QAGtC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,KAAK;YACzB,EAAE,CAAC,CAAC,KAAK,YAAY,wBAAe,CAAC,CAAA,CAAC;gBAClC,EAAE,CAAA,CAAC,KAAI,CAAC,yBAAyB,CAAC,CAAA,CAAC;oBAC/B,KAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;gBAC3C,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACF,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACxB,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8BAAO,GAAP,UAAQ,OAAe,EAAE,yBAAiC;QAAjC,0CAAA,EAAA,iCAAiC;QACtD,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;IACzD,CAAC;IACD,4BAAK,GAAL,UAAM,OAAe,EAAE,yBAAiC;QAAjC,0CAAA,EAAA,iCAAiC;QACpD,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;IACvD,CAAC;IACD,iCAAU,GAAV;QACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;IA1BQ,YAAY;QADxB,iBAAU,EAAE;yCAKmB,eAAM;OAJzB,YAAY,CA2BxB;IAAD,mBAAC;CA3BD,AA2BC,IAAA;AA3BY,oCAAY","file":"alert.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Router, NavigationStart } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { Subject } from \"rxjs/Subject\";\n\n@Injectable()\nexport class AlertService{\n    private subject = new Subject<any>();\n    private keepAfterNavigationChange = false;\n\n    constructor(private router: Router){\n        router.events.subscribe(event => {\n            if (event instanceof NavigationStart){\n                if(this.keepAfterNavigationChange){\n                    this.keepAfterNavigationChange = false;\n                }else{\n                    this.subject.next();\n                }\n            }\n        });\n    }\n\n    success(message: string, keepAfterNavigationChange = false){\n        this.keepAfterNavigationChange = keepAfterNavigationChange;\n        this.subject.next({ type: 'success', text: message});\n    }\n    error(message: string, keepAfterNavigationChange = false){\n        this.keepAfterNavigationChange = keepAfterNavigationChange;\n        this.subject.next({ type: 'error', text: message});\n    }\n    getMessage(): Observable<any>{\n        return this.subject.asObservable();\n    }\n}\n"]}