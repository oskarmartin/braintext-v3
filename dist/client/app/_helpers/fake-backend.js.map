{"version":3,"sources":["app/_helpers/fake-backend.ts"],"names":[],"mappings":"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","file":"fake-backend.js","sourcesContent":["import { Http, BaseRequestOptions, Response, ResponseOptions, RequestMethod,\n         XHRBackend, RequestOptions } from \"@angular/http\";\nimport { MockBackend, MockConnection } from \"@angular/http/testing\";\n\nexport function fakeBackendFactory(backend: MockBackend, options: BaseRequestOptions, realBackEnd: XHRBackend){\n    let users: any[] = JSON.parse(localStorage.getItem('users')) || [];\n\n    backend.connections.subscribe((connection: MockConnection) => {\n        setTimeout(() => {\n            if(connection.request.url.endsWith('/api/authenticate') && connection.request.method == RequestMethod.Post){\n                let params = JSON.parse(connection.request.getBody());\n\n                let filteredUsers = users.filter(user => {\n                    return user.username === params.username && user.password === params.password;\n                });\n\n                if(filteredUsers.length){\n                    let user = filteredUsers[0];\n                    connection.mockRespond(new Response(new ResponseOptions({\n                        status: 200,\n                        body: {\n                            id: user.id,\n                            username: user.username,\n                            firstName: user.firstName,\n                            lastName: user.lastName,\n                            token: \"fake-jwt-token\"\n                        }\n                    })));\n                }else{\n                    connection.mockError(new Error(\"Username or password incorrect!\"));\n                }\n                return;\n            }\n            if(connection.request.url.endsWith('/api/users') && connection.request.method === RequestMethod.Get){\n                if(connection.request.headers.get('Authorization') === 'Bearer fake-jwt-token'){\n                    connection.mockRespond(new Response(new ResponseOptions({\n                        status: 200,\n                        body: users\n                    })));\n                } elseÂ {\n                    connection.mockRespond(new Response(new ResponseOptions({\n                        status: 401\n                    })));\n                }\n                return;\n            }\n            if(connection.request.url.endsWith('/api/users') && connection.request.method === RequestMethod.Post){\n                let newUser = JSON.parse(connection.request.getBody());\n\n                let duplicateUser = users.filter(user => {\n                    return user.username === newUser.username\n                }).length;\n                if(duplicateUser){\n                    return connection.mockError(new Error(\"Username: \" + newUser.username + \" is already taken!\"));\n                }\n                newUser.id = users.length + 1;\n                users.push(newUser);\n                localStorage.setItem('users', JSON.stringify(users));\n\n                connection.mockRespond(new Response(new ResponseOptions({\n                    status: 200\n                })));\n                return true;\n            }\n            let realHttp = new Http(realBackEnd, options);\n            let requestOptions = new RequestOptions({\n                method: connection.request.method,\n                headers: connection.request.headers,\n                body: connection.request.getBody(),\n                url: connection.request.url,\n                withCredentials: connection.request.withCredentials,\n                responseType: connection.request.responseType\n            });\n            realHttp.request(connection.request.url, requestOptions)\n                .subscribe((response: Response) => {\n                    connection.mockRespond(response);\n                },\n                (error: any) =>{\n                    connection.mockError(error);\n                })\n        }, 500);\n    });\n    return new Http(backend, options);\n};\nexport let fakeBackendProvider = {\n    provide: Http,\n    useFactory: fakeBackendFactory,\n    deps: [MockBackend, BaseRequestOptions, XHRBackend]\n};\n"]}